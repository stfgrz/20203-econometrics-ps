library(ggthemes)
# Necessary packages for viridis
library(viridisLite)
library(viridis)
library(gridExtra)
library(magrittr)
library(textab)
# Packages related to tidyverse, for data manipulation
library(tidyverse) # includes (lubridate), (dplyr), (ggplot2), (tidyr), (tidyselect)
library(tinytex)
# To handle time changes
library(timechange)
# To solve conflicts
library(conflicted)
conflicts_prefer(dplyr::filter)
#| label: Load the relevant libraries
# Time series
library(dlm)
library(TSstudio)
library(feasts)
library(tseries)
# Necessary packages for quantmod
library(zoo)
library(xts)
library(quantmod)
#Specifically for Assignment 2
library(depmixS4)
library(HiddenMarkov)
# Datasets
library(readr)
library(fpp3)
# For fancy plots
library(ggthemes)
# Necessary packages for viridis
library(viridisLite)
library(viridis)
library(gridExtra)
library(magrittr)
library(textab)
# Packages related to tidyverse, for data manipulation
library(tidyverse) # includes (lubridate), (dplyr), (ggplot2), (tidyr), (tidyselect)
library(tinytex)
# To handle time changes
library(timechange)
# To solve conflicts
library(conflicted)
conflicts_prefer(dplyr::filter)
View(data)
install.packages("glmnet")
#| label: Load the relevant libraries
# Time series
library(dlm)
library(TSstudio)
library(feasts)
library(tseries)
# Necessary packages for quantmod
library(zoo)
library(xts)
library(quantmod)
#Specifically for this assignment
library(glmnet)
# Datasets
library(readr)
library(fpp3)
# For fancy plots
library(ggthemes)
# Necessary packages for viridis
library(viridisLite)
library(viridis)
library(gridExtra)
library(magrittr)
library(textab)
# Packages related to tidyverse, for data manipulation
library(tidyverse) # includes (lubridate), (dplyr), (ggplot2), (tidyr), (tidyselect)
library(tinytex)
# To handle time changes
library(timechange)
# To solve conflicts
library(conflicted)
conflicts_prefer(dplyr::filter)
#| label: Load the relevant libraries
# Time series
library(dlm)
library(TSstudio)
library(feasts)
library(tseries)
# Necessary packages for quantmod
library(zoo)
library(xts)
library(quantmod)
#Specifically for this assignment
library(glmnet)
# Datasets
library(readr)
library(fpp3)
# For fancy plots
library(ggthemes)
# Necessary packages for viridis
library(viridisLite)
library(viridis)
library(gridExtra)
library(magrittr)
library(textab)
# Packages related to tidyverse, for data manipulation
library(tidyverse) # includes (lubridate), (dplyr), (ggplot2), (tidyr), (tidyselect)
library(tinytex)
# To handle time changes
library(timechange)
# To solve conflicts
library(conflicted)
conflicts_prefer(dplyr::filter)
#| label: Preparing the data
latvia_data <- subset(data, country == "Latvia")
#| label: Preparing the data
latvia_data <- subset(data, countryname == "Latvia")
# Assuming "inflation" is the name of your response variable
y <- latvia_data$inflation
# Create the predictor matrix (removing the intercept column created by model.matrix)
x <- model.matrix(inflation ~ ., data = latvia_data)[, -1]
#| label: Loading the dataset
data <- read.csv("GMD.csv", header = TRUE)
#| label: Preparing the data
latvia_data <- subset(data, countryname == "Latvia")
# Assuming "inflation" is the name of your response variable
y <- latvia_data$infl
# Create the predictor matrix (removing the intercept column created by model.matrix)
x <- model.matrix(infl ~ ., data = latvia_data)[, -1]
#| label: Preparing the data
latvia_data <- subset(data, countryname == "Latvia")
# Remove columns where there's only one unique value
latvia_data <- latvia_data[, sapply(latvia_data, function(x) length(unique(x)) > 1)]
# Assuming "inflation" is the name of your response variable
y <- latvia_data$infl
# Create the predictor matrix (removing the intercept column created by model.matrix)
x <- model.matrix(infl ~ ., data = latvia_data)[, -1]
View(latvia_data)
#| label: Preparing the data
latvia_data <- subset(data, countryname == "Latvia")
# Removing the forecasts
latvia_data <- latvia_data[latvia_data$year >= 1990 & latvia_data$year <= 2024, ]
# Remove columns where there's only one unique value
latvia_data <- latvia_data[, sapply(latvia_data, function(x) length(unique(x)) > 1)]
# Extracting inflation
inflation <- latvia_data$infl
# Create the predictor matrix (removing the intercept column created by model.matrix)
covariates <- model.matrix(infl ~ ., data = latvia_data)[, -1]
#| label: Load the relevant libraries
# Time series
library(dlm)
library(TSstudio)
library(feasts)
library(tseries)
# Necessary packages for quantmod
library(zoo)
library(xts)
library(quantmod)
#Specifically for this assignment
library(glmnet)
# Datasets
library(readr)
library(fpp3)
# For fancy plots
library(ggthemes)
# Necessary packages for viridis
library(viridisLite)
library(viridis)
library(gridExtra)
library(magrittr)
library(textab)
# Packages related to tidyverse, for data manipulation
library(tidyverse) # includes (lubridate), (dplyr), (ggplot2), (tidyr), (tidyselect)
library(tinytex)
# To handle time changes
library(timechange)
# To solve conflicts
library(conflicted)
conflicts_prefer(dplyr::filter)
#| label: Load the relevant libraries
# Time series
library(dlm)
library(TSstudio)
library(feasts)
library(tseries)
# Necessary packages for quantmod
library(zoo)
library(xts)
library(quantmod)
#Specifically for this assignment
library(glmnet)
# Datasets
library(readr)
library(fpp3)
# For fancy plots
library(ggthemes)
# Necessary packages for viridis
library(viridisLite)
library(viridis)
library(gridExtra)
library(magrittr)
library(textab)
# Packages related to tidyverse, for data manipulation
library(tidyverse) # includes (lubridate), (dplyr), (ggplot2), (tidyr), (tidyselect)
library(tinytex)
# To handle time changes
library(timechange)
# To solve conflicts
library(conflicted)
conflicts_prefer(dplyr::filter)
#| label: Loading the dataset
data <- read.csv("GMD.csv", header = TRUE)
#| label: Loading the dataset
data <- read.csv("GMD.csv", header = TRUE)
#| label: Preparing the data
latvia_data <- subset(data, countryname == "Latvia")
# Removing the forecasts
latvia_data <- latvia_data[latvia_data$year >= 1990 & latvia_data$year <= 2024, ]
# Remove columns where there's only one unique value
latvia_data <- latvia_data[, sapply(latvia_data, function(x) length(unique(x)) > 1)]
# Extracting inflation
inflation <- latvia_data$infl
# Create the predictor matrix (removing the intercept column created by model.matrix)
covariates <- model.matrix(infl ~ ., data = latvia_data)[, -1]
cv_fit <- cv.glmnet(covariates, inflation, alpha = 0.5, nfolds = 10)
#| label: Preparing the data
latvia_data <- subset(data, countryname == "Latvia")
# Removing the forecasts
latvia_data <- latvia_data[latvia_data$year >= 1992 & latvia_data$year <= 2024, ]
# Remove columns where there's only one unique value
latvia_data <- latvia_data[, sapply(latvia_data, function(x) length(unique(x)) > 1)]
# Extracting inflation
inflation <- latvia_data$infl
# Create the predictor matrix (removing the intercept column created by model.matrix)
covariates <- model.matrix(infl ~ ., data = latvia_data)[, -1]
cv_fit <- cv.glmnet(covariates, inflation, alpha = 0.5, nfolds = 10)
View(covariates)
View(latvia_data)
#| label: Preparing the data
latvia_data <- subset(data, countryname == "Latvia")
# Removing the forecasts
latvia_data <- latvia_data[latvia_data$year >= 1992 & latvia_data$year <= 2024, ]
# Remove columns where there's only one unique value
latvia_data <- latvia_data[, sapply(latvia_data, function(x) length(unique(x)) > 1)]
write.csv(latvia_data)
#| label: Preparing the data
latvia_data <- subset(data, countryname == "Latvia")
# Removing the forecasts
latvia_data <- latvia_data[latvia_data$year >= 1992 & latvia_data$year <= 2024, ]
# Remove columns where there's only one unique value
latvia_data <- latvia_data[, sapply(latvia_data, function(x) length(unique(x)) > 1)]
write.csv(latvia_data, file="/Users/stefanograziosi/Documents/GitHub/20203-econometrics-ps/ps2/20203-econometrics-ps2/latvia_data.csv")
# Extracting inflation
inflation <- latvia_data$infl
# Create the predictor matrix (removing the intercept column created by model.matrix)
covariates <- model.matrix(~ . - infl - year - country, data = latvia_data)[, -1]
# Extracting inflation
inflation <- latvia_data$infl
# Create the predictor matrix (removing the intercept column created by model.matrix)
covariates <- model.matrix(~ . - infl - year, data = latvia_data)[, -1]
# Extracting inflation
inflation <- latvia_data$infl
# Create the predictor matrix (removing the intercept column created by model.matrix)
covariates <- model.matrix(~ . - infl - year, data = latvia_data)[, -1]
print(dim(covariates))  # should match the number of rows (observations) in latvia_data
print(length(inflation))  # should be the same as the number of observations
View(covariates)
#| label: Dataset 1 Preparation: no money supply, no crisis, no rates
latvia_data <- subset(data, countryname == "Latvia")
# Removing the forecasts
latvia_data <- latvia_data[latvia_data$year >= 1995 & latvia_data$year <= 2023, ]
# Remove columns where there's only one unique value
latvia_data <- latvia_data[, sapply(latvia_data, function(x) length(unique(x)) > 1)]
write.csv(latvia_data, file="/Users/stefanograziosi/Documents/GitHub/20203-econometrics-ps/ps2/20203-econometrics-ps2/latvia_data.csv")
# Extracting inflation
inflation <- latvia_data$infl
# Create the predictor matrix (removing the intercept column created by model.matrix)
covariates <- model.matrix(~ . - infl - year - HPI - ltrate - cbrate - M0 - M1 - M2 - SovDebtCrisis - CurrencyCrisis - BankingCrisis , data = latvia_data)[, -1]
print(dim(covariates))  # should match the number of rows (observations) in latvia_data
print(length(inflation))  # should be the same as the number of observations
View(covariates)
View(covariates)
#| label: Loading the dataset
data <- read.csv("GMD.csv", header = TRUE)
#| label: Dataset 1 Preparation: no money supply, no crisis, no rates
latvia_data <- subset(data, countryname == "Latvia")
# Removing the forecasts
latvia_data <- latvia_data[latvia_data$year >= 1995 & latvia_data$year <= 2023, ]
# Remove columns where there's only one unique value
latvia_data <- latvia_data[, sapply(latvia_data, function(x) length(unique(x)) > 1)]
write.csv(latvia_data, file="/Users/stefanograziosi/Documents/GitHub/20203-econometrics-ps/ps2/20203-econometrics-ps2/latvia_data.csv")
# Extracting inflation
inflation <- latvia_data$infl
# Create the predictor matrix (removing the intercept column created by model.matrix)
covariates <- model.matrix(~ . - infl - year - HPI - ltrate - cbrate - M0 - M1 - M2 - SovDebtCrisis - CurrencyCrisis - BankingCrisis , data = latvia_data)[, -1]
print(dim(covariates))  # should match the number of rows (observations) in latvia_data
print(length(inflation))  # should be the same as the number of observations
#| label: Dataset 1 Preparation: no money supply, no crisis, no rates
latvia_data <- subset(data, countryname == "Latvia")
# Removing the forecasts
latvia_data <- latvia_data[latvia_data$year >= 1995 & latvia_data$year <= 2023, ]
# Remove columns where there's only one unique value
latvia_data <- latvia_data[, sapply(latvia_data, function(x) length(unique(x)) > 1)]
write.csv(latvia_data, file="/Users/stefanograziosi/Documents/GitHub/20203-econometrics-ps/ps2/20203-econometrics-ps2/latvia_data.csv")
# Extracting inflation
inflation <- latvia_data$infl
# Create the predictor matrix (removing the intercept column created by model.matrix)
covariates <- model.matrix(~ . - infl - year - HPI - ltrate - cbrate - M0 - M1 - M2 - SovDebtCrisis - CurrencyCrisis - BankingCrisis, data = latvia_data)[, -1]
print(dim(covariates))  # should match the number of rows (observations) in latvia_data
print(length(inflation))  # should be the same as the number of observations
View(latvia_data)
#| label: Dataset 1 Preparation: no money supply, no crisis, no rates
latvia_data <- subset(data, countryname == "Latvia")
# Removing the forecasts
latvia_data <- latvia_data[latvia_data$year >= 1995 & latvia_data$year <= 2023, ]
# Remove columns where there's only one unique value
latvia_data <- latvia_data[, sapply(latvia_data, function(x) length(unique(x)) > 1)]
write.csv(latvia_data, file="/Users/stefanograziosi/Documents/GitHub/20203-econometrics-ps/ps2/20203-econometrics-ps2/latvia_data.csv")
# Extracting inflation
inflation <- latvia_data$infl
# Create the predictor matrix (removing the intercept column created by model.matrix)
covariates <- model.matrix(~ . - infl - year - HPI - ltrate - cbrate - M0 - M1 - M2 - SovDebtCrisis - CurrencyCrisis - BankingCrisis, data = latvia_data)[, -1]
print(dim(covariates))  # should match the number of rows (observations) in latvia_data
print(length(inflation))  # should be the same as the number of observations
#| label: Loading the dataset
data <- read.csv("GMD.csv", header = TRUE)
#| label: Dataset 1 Preparation: only crisis
latvia_data <- subset(data, countryname == "Latvia")
# Removing the forecasts
latvia_data_sub <- subset(latvia_data, year >= 1995 & year <= 2023)
covariate_names <- setdiff(names(latvia_data_sub), c("year", "infl"))
# Identify covariates that have complete (non-NA) data for all rows
complete_covariates <- covariate_names[sapply(latvia_data_sub[covariate_names], function(x) all(!is.na(x)))]
# Build a formula dynamically that includes only the complete covariates
formula_str <- paste("~", paste(complete_covariates, collapse = " + "))
covariates <- model.matrix(as.formula(formula_str), data = latvia_data_sub)[, -1]
#| label: Dataset 1 Preparation: only crisis
latvia_data <- subset(data, countryname == "Latvia")
# Removing the forecasts
latvia_data_sub <- subset(latvia_data, year >= 1995 & year <= 2023)
covariate_names <- setdiff(names(latvia_data_sub), c("year", "infl"))
# Identify covariates that have complete (non-NA) data for all rows
complete_covariates <- complete_covariates[sapply(complete_covariates, function(v) {
if(is.factor(latvia_data_sub[[v]])) {
length(unique(latvia_data_sub[[v]])) > 1
} else {
TRUE
}
})]
# Build a formula dynamically that includes only the complete covariates
formula_str <- paste("~", paste(complete_covariates, collapse = " + "))
covariates <- model.matrix(as.formula(formula_str), data = latvia_data_sub)[, -1]
#| label: Dataset 1 Preparation: only crisis
latvia_data <- subset(data, countryname == "Latvia")
# 1. Subset the data to the desired years
latvia_data_sub <- subset(latvia_data, year >= 1995 & year <= 2023)
# 2. Identify potential covariate names (excluding 'year' and 'infl')
covariate_names <- setdiff(names(latvia_data_sub), c("year", "infl"))
# 3. Keep only those covariates that have complete data for the period
complete_covariates <- covariate_names[sapply(latvia_data_sub[covariate_names], function(x) all(!is.na(x)))]
# 4. Remove factor covariates that have only one level in the subset
complete_covariates <- complete_covariates[sapply(complete_covariates, function(v) {
if(is.factor(latvia_data_sub[[v]])) {
length(unique(latvia_data_sub[[v]])) > 1
} else {
TRUE
}
})]
# Build a formula dynamically that includes only the complete covariates
formula_str <- paste("~", paste(complete_covariates, collapse = " + "))
covariates <- model.matrix(as.formula(formula_str), data = latvia_data_sub)[, -1]
#| label: Loading the dataset
data <- read.csv("GMD.csv", header = TRUE)
#| label: Dataset 1 Preparation: no money supply, no crisis, no rates
latvia_data <- subset(data, countryname == "Latvia")
# Removing the forecasts
latvia_data <- latvia_data[latvia_data$year >= 1995 & latvia_data$year <= 2023, ]
# Remove columns where there's only one unique value
latvia_data <- latvia_data[, sapply(latvia_data, function(x) length(unique(x)) > 1)]
write.csv(latvia_data, file="/Users/stefanograziosi/Documents/GitHub/20203-econometrics-ps/ps2/20203-econometrics-ps2/latvia_data.csv")
# Extracting inflation
inflation <- latvia_data$infl
# Create the predictor matrix (removing the intercept column created by model.matrix)
covariates <- model.matrix(~ . - infl - year - HPI - ltrate - cbrate - M0 - M1 - M2 - SovDebtCrisis - CurrencyCrisis - BankingCrisis , data = latvia_data)[, -1]
print(dim(covariates))  # should match the number of rows (observations) in latvia_data
print(length(inflation))  # should be the same as the number of observations
#| label: Dataset 1 Preparation: no money supply, no crisis, no rates
latvia_data <- subset(data, countryname == "Latvia")
# Removing the forecasts
latvia_data_prova1 <- latvia_data[latvia_data$year >= 1995 & latvia_data$year <= 2023, ]
# Remove columns where there's only one unique value
latvia_data_prova1 <- latvia_data_prova1[, sapply(latvia_data_prova1, function(x) length(unique(x)) > 1)]
write.csv(latvia_data_prova1, file="/Users/stefanograziosi/Documents/GitHub/20203-econometrics-ps/ps2/20203-econometrics-ps2/latvia_data.csv")
# Extracting inflation
inflation <- latvia_data_prova1$infl
latvia_data_prova1 <-
View(latvia_data_prova1)
latvia_data <- subset(data, countryname == "Latvia")
# Removing the forecasts
latvia_data_prova1 <- latvia_data[latvia_data$year >= 1995 & latvia_data$year <= 2023, ]
# Remove columns where there's only one unique value
latvia_data_prova1 <- latvia_data_prova1[, sapply(latvia_data_prova1, function(x) length(unique(x)) > 1)]
write.csv(latvia_data_prova1, file="/Users/stefanograziosi/Documents/GitHub/20203-econometrics-ps/ps2/20203-econometrics-ps2/latvia_data.csv")
# Extracting inflation
inflation <- latvia_data_prova1$infl
View(latvia_data_prova1)
latvia_data <- subset(data, countryname == "Latvia")
# Removing the forecasts
latvia_data_prova1 <- latvia_data[latvia_data$year >= 1995 & latvia_data$year <= 2023, ]
# Remove columns where there's only one unique value
latvia_data_prova1 <- latvia_data_prova1[, sapply(latvia_data_prova1, function(x) length(unique(x)) > 1)]
write.csv(latvia_data_prova1, file="/Users/stefanograziosi/Documents/GitHub/20203-econometrics-ps/ps2/20203-econometrics-ps2/latvia_data.csv")
# Extracting inflation
inflation <- latvia_data_prova1$infl
latvia_data_prova1[38:45] <- list(NULL)
#| label: Dataset 1 Preparation: no money supply, no crisis, no rates
latvia_data <- subset(data, countryname == "Latvia")
# Removing the forecasts
latvia_data_prova1 <- latvia_data[latvia_data$year >= 1995 & latvia_data$year <= 2023, ]
# Remove columns where there's only one unique value
latvia_data_prova1 <- latvia_data_prova1[, sapply(latvia_data_prova1, function(x) length(unique(x)) > 1)]
write.csv(latvia_data_prova1, file="/Users/stefanograziosi/Documents/GitHub/20203-econometrics-ps/ps2/20203-econometrics-ps2/latvia_data.csv")
# Extracting inflation
inflation <- latvia_data_prova1$infl
latvia_data_prova1[38:45] <- list(NULL)
latvia_data_prova1[32] <- list(NULL)
# Create the predictor matrix (removing the intercept column created by model.matrix)
covariates <- model.matrix(~ . - infl - year - HPI - ltrate - cbrate - M0 - M1 - M2 - SovDebtCrisis - CurrencyCrisis - BankingCrisis , data = latvia_data)[, -1]
#| label: Dataset 1 Preparation: no money supply, no crisis, no rates
latvia_data <- subset(data, countryname == "Latvia")
# Removing the forecasts
latvia_data_prova1 <- latvia_data[latvia_data$year >= 1995 & latvia_data$year <= 2023, ]
# Remove columns where there's only one unique value
latvia_data_prova1 <- latvia_data_prova1[, sapply(latvia_data_prova1, function(x) length(unique(x)) > 1)]
write.csv(latvia_data_prova1, file="/Users/stefanograziosi/Documents/GitHub/20203-econometrics-ps/ps2/20203-econometrics-ps2/latvia_data.csv")
# Extracting inflation
inflation <- latvia_data_prova1$infl
latvia_data_prova1[38:45] <- list(NULL)
latvia_data_prova1[32] <- list(NULL)
# Create the predictor matrix (removing the intercept column created by model.matrix)
covariates <- model.matrix(~ . - infl - year, data = latvia_data_prova1)[, -1]
print(dim(covariates))  # should match the number of rows (observations) in latvia_data
print(length(inflation))  # should be the same as the number of observations
# Running 10-fold cross-validation for elastic net with alpha = 0.5
cv_fit <- cv.glmnet(covariates, inflation, alpha = 0.5, nfolds = 10)
# Plot the cross-validation error curve
plot(cv_fit)
# Extract the best lambda (minimizing cross-validation error)
best_lambda <- cv_fit$lambda.min
final_model <- glmnet(x, y, alpha = 0.5, lambda = best_lambda)
final_model <- glmnet(covariates, inflation, alpha = 0.5, lambda = best_lambda)
# To view the model coefficients:
print(coef(final_model))
#| label: Load the relevant libraries
# Time series
library(dlm)
library(TSstudio)
library(feasts)
library(tseries)
# Necessary packages for quantmod
library(zoo)
library(xts)
library(quantmod)
#Specifically for this assignment
library(glmnet)
# Datasets
library(readr)
library(fpp3)
# For fancy plots
library(ggthemes)
# Necessary packages for viridis
library(viridisLite)
library(viridis)
library(gridExtra)
library(magrittr)
library(textab)
# Packages related to tidyverse, for data manipulation
library(tidyverse) # includes (lubridate), (dplyr), (ggplot2), (tidyr), (tidyselect)
library(tinytex)
# To handle time changes
library(timechange)
# To solve conflicts
library(conflicted)
conflicts_prefer(dplyr::filter)
#| label: Loading the dataset
data <- read.csv("GMD.csv", header = TRUE)
#| label: Dataset 1 Preparation: no money supply, no crisis, no rates
latvia_data <- subset(data, countryname == "Latvia")
# Removing the forecasts
latvia_data_prova1 <- latvia_data[latvia_data$year >= 1995 & latvia_data$year <= 2023, ]
# Remove columns where there's only one unique value
latvia_data_prova1 <- latvia_data_prova1[, sapply(latvia_data_prova1, function(x) length(unique(x)) > 1)]
write.csv(latvia_data_prova1, file="/Users/stefanograziosi/Documents/GitHub/20203-econometrics-ps/ps2/20203-econometrics-ps2/latvia_data.csv")
# Extracting inflation
inflation <- latvia_data_prova1$infl
latvia_data_prova1[38:45] <- list(NULL)
latvia_data_prova1[32] <- list(NULL)
# Create the predictor matrix (removing the intercept column created by model.matrix)
covariates <- model.matrix(~ . - infl - year, data = latvia_data_prova1)[, -1]
print(dim(covariates))  # should match the number of rows (observations) in latvia_data
print(length(inflation))  # should be the same as the number of observations
# Running 10-fold cross-validation for elastic net with alpha = 0.5
cv_fit <- cv.glmnet(covariates, inflation, alpha = 0.5, nfolds = 10)
# Plot the cross-validation error curve
plot(cv_fit)
# Extract the best lambda (minimizing cross-validation error)
best_lambda <- cv_fit$lambda.min
final_model <- glmnet(covariates, inflation, alpha = 0.5, lambda = best_lambda)
# To view the model coefficients:
print(coef(final_model))
View(covariates)
final_model <- glmnet(covariates, inflation, alpha = 0.7, lambda = best_lambda)
# To view the model coefficients:
print(coef(final_model))
